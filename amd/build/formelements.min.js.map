{"version":3,"file":"formelements.min.js","sources":["../src/formelements.js"],"sourcesContent":["/**\n * This file is part of Moodle - http://moodle.org/\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @author    Guillermo Leon Alvarez Salamanca\n * @copyright Copyright (c) 2017 Open LMS / 2023 Anthology Inc. and its affiliates\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * JS code to disable temporarily the SafeAssign settings parameters in module edit from\n * until the page ends to load all the elements on it.\n */\nimport $ from 'jquery';\nimport {get_string as getString} from 'core/str';\n\nconst formElements = {\n    /**\n     * Hides via javascript the form elements until page is ready.\n     */\n    init: function() {\n\n        /**\n         * Create a div to display the loading message inside module edit form.\n         */\n        const createDiv = function() {\n            const div = $('<div></div>').attr('class', child.attr('class'));\n            div.attr('id', 'safeassign_loading_div');\n            parent.append(div);\n            getMessage();\n        };\n\n        /**\n         * Returns a string with the loading message.\n         */\n        const getMessage = function() {\n\n            // Get loading message via ajax.\n            const messageString = getString('safeassign_loading_settings', 'plagiarism_safeassign');\n\n            $.when(messageString).done(function(s) {\n                $('#safeassign_loading_div').append(s);\n            });\n\n        };\n\n        /**\n         * Checks if the element is disabled.\n         * @returns {boolean}\n         */\n        const isElementDisabled = function() {\n            return $('#id_safeassign_global_reference').prop('disabled');\n        };\n\n        /**\n         * Makes a JQuery promise to see if some element is disabled.\n         * @param {function} evaluateFunction\n         * @param {int} maxIterations\n         * @returns {promise} JQuery promise\n         */\n        const whenTrue = function(evaluateFunction, maxIterations) {\n            maxIterations = !maxIterations ? 10 : maxIterations;\n\n            const prom = $.Deferred();\n            let i = 0;\n            const checker = setInterval(function() {\n                i = i + 1;\n                if (i > maxIterations) {\n                    prom.reject();\n                    clearInterval(checker);\n                } else {\n                    if (evaluateFunction()) {\n                        prom.resolve();\n                        clearInterval(checker);\n                    }\n                }\n            }, 1000);\n\n            return prom.promise();\n        };\n\n        /**\n         * Print the settings checkboxes when tha page has been loaded.\n         */\n        const printSettings = function() {\n            const div = $('#safeassign_loading_div');\n            div.addClass('hidden-div');\n            child.removeAttr('style');\n            selectorCheckbox.prop('checked', checkboxInitialValue);\n            selectorCheckbox.prop('disabled', false);\n            if (checkboxInitialValue) {\n                $('#id_safeassign_originality_report').prop('disabled', false);\n                $('#id_safeassign_global_reference').prop('disabled', false);\n            }\n        };\n\n        const parent = $('#id_plagiarismdesc');\n\n        // Hide the settings for SafeAssign in the module edit form.\n        const child = parent.children('div').hide();\n\n        // Disable SafeAssign enable settings.\n        const selectorCheckbox = $('#id_safeassign_enabled');\n        const checkboxInitialValue = selectorCheckbox.prop('checked');\n        selectorCheckbox.prop('checked', false);\n        selectorCheckbox.prop('disabled', true);\n\n        createDiv();\n\n        const ready = whenTrue(isElementDisabled, 30);\n        ready.then(printSettings);\n\n    }\n};\n\nexport default formElements;\n"],"names":["init","getMessage","messageString","when","done","s","append","parent","child","children","hide","selectorCheckbox","checkboxInitialValue","prop","div","attr","createDiv","evaluateFunction","maxIterations","prom","$","Deferred","i","checker","setInterval","reject","clearInterval","resolve","promise","whenTrue","then","addClass","removeAttr"],"mappings":";;;;;;;;;;;;;;;;;;;;0JA4BqB,CAIjBA,KAAM,iBAeIC,WAAa,iBAGTC,eAAgB,mBAAU,8BAA+B,yCAE7DC,KAAKD,eAAeE,MAAK,SAASC,uBAC9B,2BAA2BC,OAAOD,OAuDtCE,QAAS,mBAAE,sBAGXC,MAAQD,OAAOE,SAAS,OAAOC,OAG/BC,kBAAmB,mBAAE,0BACrBC,qBAAuBD,iBAAiBE,KAAK,WACnDF,iBAAiBE,KAAK,WAAW,GACjCF,iBAAiBE,KAAK,YAAY,GAhFhB,iBACRC,KAAM,mBAAE,eAAeC,KAAK,QAASP,MAAMO,KAAK,UACtDD,IAAIC,KAAK,KAAM,0BACfR,OAAOD,OAAOQ,KACdb,aA8EJe,IA/CiB,SAASC,iBAAkBC,eACxCA,cAAiBA,eAAgB,SAE3BC,KAAOC,gBAAEC,eACXC,EAAI,QACFC,QAAUC,aAAY,WACxBF,GAAQ,EACJA,EAAIJ,eACJC,KAAKM,SACLC,cAAcH,UAEVN,qBACAE,KAAKQ,UACLD,cAAcH,YAGvB,YAEIJ,KAAKS,WA+BFC,EA3DY,kBACf,mBAAE,mCAAmChB,KAAK,cA0DX,IACpCiB,MA1BgB,YACN,mBAAE,2BACVC,SAAS,cACbvB,MAAMwB,WAAW,SACjBrB,iBAAiBE,KAAK,UAAWD,sBACjCD,iBAAiBE,KAAK,YAAY,GAC9BD,2CACE,qCAAqCC,KAAK,YAAY,uBACtD,mCAAmCA,KAAK,YAAY"}