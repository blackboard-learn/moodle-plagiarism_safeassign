{"version":3,"file":"score.min.js","sources":["../src/score.js"],"sourcesContent":["/**\n * This file is part of Moodle - http://moodle.org/\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @author    Guillermo Leon Alvarez Salamanca\n * @copyright Copyright (c) 2017 Open LMS / 2023 Anthology Inc. and its affiliates\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * JS code to listen the disclosure agreement checkbox in an assignment\n * configured with SafeAssign.\n */\nimport $ from 'jquery';\nimport {get_string as getString} from 'core/str';\n\nconst score = {\n    /**\n     * Adds a new DOM element in the submission tree object to display the average plagiarism\n     * score for some submission.\n     * @param {int} avgScore\n     * @param {int} userId\n     * @param {string} originalityReportLink\n     */\n    init: function(avgScore, userId, originalityReportLink) {\n\n        /**\n         * Checks if some element exist in page DOM.\n         * @param {string} selector\n         * @returns {boolean}\n         */\n        const elementExists = function(selector) {\n            const el = $(selector);\n            return (el.length) ? true : false;\n        };\n\n        /**\n         * Creates a new DOM element and attach it into the file submission tree.\n         * @param {string} selector\n         */\n        const appendAvgScoreFilesTree = function(selector) {\n            if (!elementExists('#safeassign_score_' + userId)) {\n                const tree = $(selector);\n                const td = $('<td></td>').attr('id', 'safeassign_text_' + userId);\n                td.addClass('ygtvcell ygtvhtml ygtvcontent');\n                const trow = $('<tr></tr>').addClass('ygtvrow').append(td);\n                const table = $('<table></table>').attr('id', 'safeassign_score_' + userId).append(trow);\n                const div = $('<div></div>').addClass('ygtvitem').append(table);\n                tree.prepend(div);\n                if (originalityReportLink) {\n                    const reporttd = $('<td></td>').attr('id', 'safeassign_or_' + userId)\n                        .addClass('ygtvcell ygtvhtml ygtvcontent');\n                    reporttd.append(originalityReportLink);\n                    const reportrow = $('<tr></tr>').addClass('ygtvrow').append(reporttd);\n                    $('#safeassign_score_' + userId).append(reportrow);\n                }\n                getMessage(avgScore, '#safeassign_text_' + userId);\n            }\n        };\n\n        /**\n         * Creates a new DOM element and attach it into the online submission region.\n         * @param {string} selector\n         */\n        const appendAvgScoreOnlineSubm = function(selector) {\n            if (!elementExists('#safeassign_online_sub_' + userId)) {\n                const el = $(selector).parent();\n                const div = $('<div></div>').attr('id', 'safeassign_online_sub_' + userId);\n                if (originalityReportLink) {\n                    const reportdiv = $('<div></div>').attr('id', 'safeassign_online_or_' + userId);\n                    reportdiv.append(originalityReportLink);\n                    el.prepend(reportdiv);\n                }\n                el.prepend(div);\n                getMessage(avgScore, '#safeassign_online_sub_' + userId);\n            }\n        };\n\n        /**\n         * Returns a message with the average score.\n         * @param {int} avgScore\n         * @param {string} selector\n         */\n        const getMessage = function(avgScore, selector) {\n\n            // Get overall score string via ajax.\n            const messageString = getString('safeassign_overall_score', 'plagiarism_safeassign', avgScore);\n\n            $.when(messageString).done(function(s) {\n                $(selector).append(s);\n            });\n\n        };\n\n        /**\n         * Makes a JQuery promise to see if some element exist in the DOM.\n         * @param {string} containerSelector\n         * @param {int} maxIterations\n         * @returns {promise} JQuery promise\n         */\n        const whenTrue = function(containerSelector, maxIterations) {\n            maxIterations = !maxIterations ? 10 : maxIterations;\n\n            const prom = $.Deferred();\n            let i = 0;\n            var checker = setInterval(function() {\n                i = i + 1;\n                if (i > maxIterations) {\n                    prom.reject();\n                    clearInterval(checker);\n                } else {\n                    if (elementExists(containerSelector)) {\n                        prom.resolve();\n                        clearInterval(checker);\n                    }\n                }\n            }, 200);\n\n            return prom.promise();\n        };\n\n        // Checks if we are on assign grading view.\n        const pageObject = $('#page-mod-assign-grading');\n        const isFeedbackView = pageObject.length;\n        let fileSelector = '.ygtvchildren';\n        let onlineSelector = '.plagiarism-inline.online-text-div';\n        if (isFeedbackView) {\n            fileSelector = '.user' + userId + ' .ygtvchildren';\n            onlineSelector = '.user' + userId + ' td div.plagiarism-inline.online-text-div';\n        }\n\n        const readyFiles = whenTrue(fileSelector, 20);\n        readyFiles.then(function() {\n            appendAvgScoreFilesTree(fileSelector);\n        });\n\n        const readyOnline = whenTrue(onlineSelector, 20);\n        readyOnline.then(function() {\n            appendAvgScoreOnlineSubm(onlineSelector);\n        });\n    }\n};\n\nexport default score;\n"],"names":["init","avgScore","userId","originalityReportLink","elementExists","selector","length","getMessage","messageString","when","done","s","append","whenTrue","containerSelector","maxIterations","prom","$","Deferred","i","checker","setInterval","reject","clearInterval","resolve","promise","isFeedbackView","fileSelector","onlineSelector","then","tree","td","attr","addClass","trow","table","div","prepend","reporttd","reportrow","appendAvgScoreFilesTree","el","parent","reportdiv","appendAvgScoreOnlineSubm"],"mappings":";;;;;;;;;;;;;;;;;;;;0JA4Bc,CAQVA,KAAM,SAASC,SAAUC,OAAQC,6BAOvBC,cAAgB,SAASC,mBAChB,mBAAEA,UACFC,QAkDTC,WAAa,SAASN,SAAUI,gBAG5BG,eAAgB,mBAAU,2BAA4B,wBAAyBP,0BAEnFQ,KAAKD,eAAeE,MAAK,SAASC,uBAC9BN,UAAUO,OAAOD,OAWrBE,SAAW,SAASC,kBAAmBC,eACzCA,cAAiBA,eAAgB,SAE3BC,KAAOC,gBAAEC,eACXC,EAAI,MACJC,QAAUC,aAAY,WACtBF,GAAQ,EACJA,EAAIJ,eACJC,KAAKM,SACLC,cAAcH,UAEVhB,cAAcU,qBACdE,KAAKQ,UACLD,cAAcH,YAGvB,YAEIJ,KAAKS,WAKVC,gBADa,mBAAE,4BACapB,WAC9BqB,aAAe,gBACfC,eAAiB,qCACjBF,iBACAC,aAAe,QAAUzB,OAAS,iBAClC0B,eAAiB,QAAU1B,OAAS,6CAGrBW,SAASc,aAAc,IAC/BE,MAAK,YA5FgB,SAASxB,cAChCD,cAAc,qBAAuBF,QAAS,OACzC4B,MAAO,mBAAEzB,UACT0B,IAAK,mBAAE,aAAaC,KAAK,KAAM,mBAAqB9B,QAC1D6B,GAAGE,SAAS,uCACNC,MAAO,mBAAE,aAAaD,SAAS,WAAWrB,OAAOmB,IACjDI,OAAQ,mBAAE,mBAAmBH,KAAK,KAAM,oBAAsB9B,QAAQU,OAAOsB,MAC7EE,KAAM,mBAAE,eAAeH,SAAS,YAAYrB,OAAOuB,UACzDL,KAAKO,QAAQD,KACTjC,sBAAuB,OACjBmC,UAAW,mBAAE,aAAaN,KAAK,KAAM,iBAAmB9B,QACzD+B,SAAS,iCACdK,SAAS1B,OAAOT,6BACVoC,WAAY,mBAAE,aAAaN,SAAS,WAAWrB,OAAO0B,8BAC1D,qBAAuBpC,QAAQU,OAAO2B,WAE5ChC,WAAWN,SAAU,oBAAsBC,SA6E/CsC,CAAwBb,iBAGRd,SAASe,eAAgB,IACjCC,MAAK,YAzEgB,SAASxB,cACjCD,cAAc,0BAA4BF,QAAS,OAC9CuC,IAAK,mBAAEpC,UAAUqC,SACjBN,KAAM,mBAAE,eAAeJ,KAAK,KAAM,yBAA2B9B,WAC/DC,sBAAuB,OACjBwC,WAAY,mBAAE,eAAeX,KAAK,KAAM,wBAA0B9B,QACxEyC,UAAU/B,OAAOT,uBACjBsC,GAAGJ,QAAQM,WAEfF,GAAGJ,QAAQD,KACX7B,WAAWN,SAAU,0BAA4BC,SAgErD0C,CAAyBhB"}