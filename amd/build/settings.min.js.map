{"version":3,"file":"settings.min.js","sources":["../src/settings.js"],"sourcesContent":["/**\n * This file is part of Moodle - http://moodle.org/\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @author    Jonathan Garcia Gomez jonathan.garcia@openlms.net\n * @copyright Copyright (c) 2017 Open LMS / 2023 Anthology Inc. and its affiliates\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * JS code to test SafeAssing Credentials.\n */\nimport $ from 'jquery';\nimport ModalFactory from 'core/modal_factory';\nimport Templates from 'core/templates';\nimport {get_string as getString, get_strings as getStrings} from 'core/str';\nimport ajax from 'core/ajax';\n\nconst settings = {\n    /**\n     * Through the Moodle core functions sends the data for instructor and student so their credentials\n     * can be tested.\n     * @param {string} storedUrl\n     */\n    init: function(storedUrl) {\n\n        // We need all the required inputs to test connection.\n        const inputs = '#id_safeassign_api, #id_safeassign_instructor_username, #id_safeassign_instructor_password, ' +\n            '#id_safeassign_student_username, #id_safeassign_student_password';\n\n        // Disables the \"Test connection\" button and changes the text value.\n        const disableButton = function(string) {\n            $('#id_test_credentials').attr('disabled', 'disabled');\n            $('#id_test_credentials').attr('value', string);\n        };\n\n        const buttonText = getString('button_disabled', 'plagiarism_safeassign');\n\n        $.when(buttonText).done(function(localizedString) {\n\n            // New forms should have the \"Test connection\" button disabled until the fields have content.\n            $(inputs).each(function() {\n                if ($(this).val() == '') {\n                    disableButton(localizedString);\n                }\n            });\n\n            // Changes in the input fields should be saved to enable the \"Test connection\" button.\n            $(inputs).on('input', function() {\n                disableButton(localizedString);\n            });\n\n            // If the stored URL is different from the one selected in the dropdown, disable the \"Test connection\" button.\n            const url = $('#id_safeassign_api').val();\n            if (url != storedUrl) {\n                disableButton(localizedString);\n            }\n        });\n\n        /**\n         * Changes the class of the html element to match the response status.\n         * @param {string} selector Id for the html element\n         * @param {bool} status Response status\n         */\n        const swapClasses = function(selector, status) {\n            if (status) {\n                if ($(selector).hasClass('alert-warning')) {\n                    $(selector).removeClass(\"alert-warning\").addClass('alert-success');\n                } else if ($(selector).hasClass('alert-danger')) {\n                    $(selector).removeClass(\"alert-danger\").addClass('alert-success');\n                }\n            } else {\n                if ($(selector).hasClass('alert-warning')) {\n                    $(selector).removeClass(\"alert-warning\").addClass('alert-danger');\n                } else if ($(selector).hasClass('alert-success')) {\n                    $(selector).removeClass(\"alert-success\").addClass('alert-danger');\n                }\n            }\n        };\n\n        const credentialsTrigger = $('#id_test_credentials');\n\n        // First bring the required stings for the modal.\n        const strings = getStrings([\n            {key: 'test_credentials', component: 'plagiarism_safeassign'},\n            {key: 'safeassign_credentials_verified', component: 'plagiarism_safeassign'},\n            {key: 'safeassign_credentials_fail', component: 'plagiarism_safeassign'}\n        ]);\n\n        let localizedStrings = [];\n\n        // When the strings are ready we can create the modal.\n        $.when(strings).done(function(localizedEditString) {\n            localizedStrings = localizedEditString;\n            ModalFactory.create({\n                title: localizedEditString[0],\n                body: Templates.render('plagiarism_safeassign/modal', {}),\n                type: ModalFactory.types.DEFAULT,\n            }, credentialsTrigger);\n        });\n\n        /**\n         * Set the default state for the modal\n         * @param {string} selector\n         */\n        const setDefault = function(selector) {\n            if ($(selector).hasClass('alert-success')) {\n                $(selector).removeClass(\"alert-success\").addClass('alert-warning');\n            } else if ($(selector).hasClass('alert-danger')) {\n                $(selector).removeClass(\"alert-danger\").addClass('alert-warning');\n            }\n        };\n\n        /**\n         * Sends the username and password to validate student/instructor credentials.\n         * It also changes the text and the class of the modal <p> tag.\n         * @param {string} resultText Selector used to identify the text that should change.\n         * @param {string} resultElement Selector used to identify the html tag to change its color.\n         * @param {string} username\n         * @param {string} password\n         * @param {string} baseUrl\n         * @param {int}    userId\n         */\n        const testCredentials = function(resultText, resultElement, username, password, baseUrl, userId) {\n            const promise = ajax.call(\n                [{\n                    methodname: 'plagiarism_safeassign_test_api_credentials',\n                    args: {\n                        username: username,\n                        password: password,\n                        baseurl: baseUrl,\n                        userid: userId\n                    }\n                }]\n            )[0];\n            promise.done(function(response) {\n                if (response.success) {\n                    swapClasses(resultElement, true);\n                    $(resultText).text(localizedStrings[1]);\n                } else {\n                    swapClasses(resultElement, false);\n                    $(resultText).text(localizedStrings[2]);\n                }\n            }).fail(function() {\n                swapClasses(resultElement, false);\n                $(resultText).text(localizedStrings[2]);\n            });\n        };\n\n        credentialsTrigger.click(function(e) {\n            e.preventDefault();\n            setDefault('#instructor_credentials');\n            $('#instructor_result').text('...');\n            setDefault('#student_credentials');\n            $('#student_result').text('...');\n            const instructorUsername = $('#id_safeassign_instructor_username').val();\n            const instructorPassword = $('#id_safeassign_instructor_password').val();\n            const studentUsername = $('#id_safeassign_student_username').val();\n            const studentPassword = $('#id_safeassign_student_password').val();\n            const userId = $('input[name=userid]').val();\n            const baseUrl = $('#id_safeassign_api').val();\n            testCredentials('#instructor_result', '#instructor_credentials', instructorUsername,\n                instructorPassword, baseUrl, userId);\n            testCredentials('#student_result', '#student_credentials', studentUsername, studentPassword,\n                baseUrl, userId);\n        });\n\n        const cleanSelect = $('#id_safeassign_additional_roles');\n        if (cleanSelect.find('option').length > 1) {\n            cleanSelect.change(function() {\n                $( \"option:selected\" ).each(function() {\n                    if ($(this).val() == 0) {\n                        cleanSelect.val(0);\n                    }\n                });\n            });\n        }\n    }\n};\n\nexport default settings;\n"],"names":["init","storedUrl","inputs","disableButton","string","attr","buttonText","when","done","localizedString","each","this","val","on","swapClasses","selector","status","hasClass","removeClass","addClass","credentialsTrigger","strings","key","component","localizedStrings","localizedEditString","create","title","body","Templates","render","type","ModalFactory","types","DEFAULT","setDefault","testCredentials","resultText","resultElement","username","password","baseUrl","userId","ajax","call","methodname","args","baseurl","userid","response","success","text","fail","click","e","preventDefault","instructorUsername","instructorPassword","studentUsername","studentPassword","cleanSelect","find","length","change"],"mappings":";;;;;;;;;;;;;;;;;;;;kRA8BiB,CAMbA,KAAM,SAASC,iBAGLC,OAAS,+JAITC,cAAgB,SAASC,4BACzB,wBAAwBC,KAAK,WAAY,gCACzC,wBAAwBA,KAAK,QAASD,SAGtCE,YAAa,mBAAU,kBAAmB,yCAE9CC,KAAKD,YAAYE,MAAK,SAASC,qCAG3BP,QAAQQ,MAAK,WACU,KAAjB,mBAAEC,MAAMC,OACRT,cAAcM,wCAKpBP,QAAQW,GAAG,SAAS,WAClBV,cAAcM,qBAIN,mBAAE,sBAAsBG,OACzBX,WACPE,cAAcM,0BAShBK,YAAc,SAASC,SAAUC,QAC/BA,QACI,mBAAED,UAAUE,SAAS,qCACnBF,UAAUG,YAAY,iBAAiBC,SAAS,kBAC3C,mBAAEJ,UAAUE,SAAS,qCAC1BF,UAAUG,YAAY,gBAAgBC,SAAS,kBAGjD,mBAAEJ,UAAUE,SAAS,qCACnBF,UAAUG,YAAY,iBAAiBC,SAAS,iBAC3C,mBAAEJ,UAAUE,SAAS,sCAC1BF,UAAUG,YAAY,iBAAiBC,SAAS,iBAKxDC,oBAAqB,mBAAE,wBAGvBC,SAAU,oBAAW,CACvB,CAACC,IAAK,mBAAoBC,UAAW,yBACrC,CAACD,IAAK,kCAAmCC,UAAW,yBACpD,CAACD,IAAK,8BAA+BC,UAAW,+BAGhDC,iBAAmB,mBAGrBjB,KAAKc,SAASb,MAAK,SAASiB,qBAC1BD,iBAAmBC,2CACNC,OAAO,CAChBC,MAAOF,oBAAoB,GAC3BG,KAAMC,mBAAUC,OAAO,8BAA+B,IACtDC,KAAMC,uBAAaC,MAAMC,SAC1Bd,6BAODe,WAAa,SAASpB,WACpB,mBAAEA,UAAUE,SAAS,qCACnBF,UAAUG,YAAY,iBAAiBC,SAAS,kBAC3C,mBAAEJ,UAAUE,SAAS,qCAC1BF,UAAUG,YAAY,gBAAgBC,SAAS,kBAcnDiB,gBAAkB,SAASC,WAAYC,cAAeC,SAAUC,SAAUC,QAASC,QACrEC,cAAKC,KACjB,CAAC,CACGC,WAAY,6CACZC,KAAM,CACFP,SAAUA,SACVC,SAAUA,SACVO,QAASN,QACTO,OAAQN,WAGlB,GACMlC,MAAK,SAASyC,UACdA,SAASC,SACTpC,YAAYwB,eAAe,uBACzBD,YAAYc,KAAK3B,iBAAiB,MAEpCV,YAAYwB,eAAe,uBACzBD,YAAYc,KAAK3B,iBAAiB,QAEzC4B,MAAK,WACJtC,YAAYwB,eAAe,uBACzBD,YAAYc,KAAK3B,iBAAiB,QAI5CJ,mBAAmBiC,OAAM,SAASC,GAC9BA,EAAEC,iBACFpB,WAAW,+CACT,sBAAsBgB,KAAK,OAC7BhB,WAAW,4CACT,mBAAmBgB,KAAK,aACpBK,oBAAqB,mBAAE,sCAAsC5C,MAC7D6C,oBAAqB,mBAAE,sCAAsC7C,MAC7D8C,iBAAkB,mBAAE,mCAAmC9C,MACvD+C,iBAAkB,mBAAE,mCAAmC/C,MACvD8B,QAAS,mBAAE,sBAAsB9B,MACjC6B,SAAU,mBAAE,sBAAsB7B,MACxCwB,gBAAgB,qBAAsB,0BAA2BoB,mBAC7DC,mBAAoBhB,QAASC,QACjCN,gBAAgB,kBAAmB,uBAAwBsB,gBAAiBC,gBACxElB,QAASC,iBAGXkB,aAAc,mBAAE,mCAClBA,YAAYC,KAAK,UAAUC,OAAS,GACpCF,YAAYG,QAAO,+BACZ,mBAAoBrD,MAAK,WACH,IAAjB,mBAAEC,MAAMC,OACRgD,YAAYhD,IAAI"}